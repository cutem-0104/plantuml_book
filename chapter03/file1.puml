@startuml chapter3
Bob->Alice : hello
@enduml

@startuml
' comment
/'
comment
'/
class TypeA {
  property
  staticProperty {static}
  method()
  staticMethod() {static}
}

abstract TypeB {
  method()
  abstractMethod() {abstract}
}

interface TypeC {
  abstractMethod() {abstract}
}

class TypeD<<(T, #FF7700)>> {
  method()
}
@enduml

@startuml 単方向関連
  /'
  BoardはDateTime型のdeadlineを持つ
  BoardはString型のtitleを持つ
  BoardはPost型のpostsを持つ
  '/
Board "1" --> "*" Post : posts
DateTime "0..1" <- "*" Board : deadline
Board "*" -> "1" String : title
@enduml

@startuml 関連と属性
class Board {
  /'
  Boardはdeadlineを1つ持つ場合と持たない場合がある
  Boardは必ず1つのtitleを持つ
  Boardはpostsを持たない場合と上限なく持つ場合がある
  '/
  + deadline: DateTime [0..1]
  + title: String [1]
  + posts: Post [*] {posted}
}
@enduml

@startuml 双方向関連
' MotorcycleはPerson型のownerを0－1つ持つ
' 所有する・されるの双方向関連がある
Person "owner\n0..1" <-> "*" Motorcycle
@enduml

@startuml 動詞を用いた関連名
' MotorcycleはPerson型のownerを0－1つ持つ
' PersonはMotorcycleをOwnsしている
Person "0..1" - "*" Motorcycle : Owns >
@enduml

@startuml 集約
Person "*" o-> "*" Motorcycle
@enduml

@startuml コンポジション
'コンポジションはインスタンスを複数のインスタンスに所有させることができない
'Sushiは1つのDishにだけ乗ることができる
Dish "1" *-> Sushi
@enduml

@startuml 汎化
'UserTestクラスはTestCaseクラスを継承している
UserTest -|> TestCase
@enduml

@startuml 実装
'FileLoggerはLoggerInterfaceを実装している
interface LoggerInterface
class FileLogger
FileLogger .|> LoggerInterface
@enduml

@startuml 依存関係
'UserServiceクラスはArrayAccessインターフェースとUserクラスを利用している
'※依存関係が双方向にならないように注意する
interface ArrayAccess
UserService ..> User : <<use>>
UserService ..> ArrayAccess : <<use>>
@enduml

@startuml ノート
'ノートの代わりにクラス図の外にコメントを書くことも検討する
class DBConnection
note right of DBConnection
データベース接続
end note
@enduml

@startuml 複数要素にリンクしたノート
note as LoggerNote
ロガー
end note
SkackLogger .. LoggerNote
FileLogger .. LoggerNote
@enduml